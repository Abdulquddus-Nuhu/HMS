@* @using Microsoft.AspNetCore.Authorization
@attribute [Authorize] *@
@page "/admin-home"
@page "/"
@using System.Security.Claims
@* @using Alansar.Client.Components.Layout
@layout AdminLayout *@
@inject HttpClient Http
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />
@rendermode InteractiveAuto
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@* @inherits ClaimsBaseComponent *@
@using Alansar.Client.ApiCalls
@inject IStudentApi StudentApi


@* <PageTitle>Hostel Management System</PageTitle> *@
<PageTitle>HMS</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Welcome to the Hostel Management System!</MudText>
<MudText Class="mb-8">Manage your hostel efficiently with features like booking management, dining space reservations, and more.</MudText>

<MudGrid Class="mb-8">
    <MudItem xs="12" sm="4">
        <MudCard>
            <MudCardContent>
                <MudText Typo="Typo.h6" Align="Align.Center">Number of Students</MudText>
                <MudText Typo="Typo.h4" Align="Align.Center">@numberOfStudents</MudText>
            </MudCardContent>
        </MudCard>
    </MudItem>
    <MudItem xs="12" sm="4">
        <MudCard>
            <MudCardContent>
                <MudText Typo="Typo.h6" Align="Align.Center">Number of Dining Halls</MudText>
                <MudText Typo="Typo.h4" Align="Align.Center">@numberOfDiningHalls</MudText>
            </MudCardContent>
        </MudCard>
    </MudItem>
    <MudItem xs="12" sm="4">
        <MudCard>
            <MudCardContent>
                <MudText Typo="Typo.h6" Align="Align.Center">Number of Rooms</MudText>
                <MudText Typo="Typo.h4" Align="Align.Center">@numberOfRooms</MudText>
            </MudCardContent>
        </MudCard>
    </MudItem>
</MudGrid>

<MudGrid>
    <MudItem xs="12" sm="6">
        <MudCard>
            <MudCardContent>
                <MudText Typo="Typo.h5">Manage Bookings</MudText>
                <MudText Typo="Typo.body2">Handle all room bookings and assignments seamlessly.</MudText>
            </MudCardContent>
            <MudCardActions>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" Href="booking">Go to Bookings</MudButton>
            </MudCardActions>
        </MudCard>
    </MudItem>
    <MudItem xs="12" sm="6">
        <MudCard>
            <MudCardContent>
                <MudText Typo="Typo.h5">Manage Dining Spaces</MudText>
                <MudText Typo="Typo.body2">Oversee dining space reservations and availability.</MudText>
            </MudCardContent>
            <MudCardActions>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" Href="dining">Go to Dining Spaces</MudButton>
            </MudCardActions>
        </MudCard>
    </MudItem>
</MudGrid>




@code {
    private int numberOfStudents = 150;  
    private int numberOfDiningHalls = 5; 
    private int numberOfRooms = 50; 
    private ClaimsPrincipal claimsPrincipal; 
    private AuthenticationState authState;
    private string tenantId;
    private string role;
    private string email;

    protected override async Task OnInitializedAsync()
    {

        authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        claimsPrincipal = authState.User;

        // Extract claims using the base class method
        // ExtractUserClaims(claimsPrincipal);

        // Http.DefaultRequestHeaders

        tenantId = claimsPrincipal.FindFirst("TenantId")?.Value;
        role = claimsPrincipal.FindFirst("role")?.Value;
        email = claimsPrincipal.FindFirst(ClaimTypes.Email)?.Value;

        // Call the API using Refit
        // numberOfStudents = await StudentApi.GetStudentCountAsync(tenantId, role, email);
        // numberOfDiningHalls = await StudentApi.GetDiningSpaceCountAsync(tenantId, role, email);
        // numberOfRooms = await StudentApi.GetRoomCountAsync(tenantId, role, email);


        // numberOfStudents = await Http.GetFromJsonAsync<int>("api/student/count");
        // numberOfDiningHalls = await Http.GetFromJsonAsync<int>("api/diningspace/count");
        // numberOfRooms = await Http.GetFromJsonAsync<int>("api/room/count");

        // Log these values to ensure they are not null
        Console.WriteLine($"TenantId: {tenantId}, Role: {role}, Email: {email}");

        // Call the API using HttpClient
        numberOfStudents = await GetStudentCountAsync(tenantId, role, email);
        numberOfDiningHalls = await GetDiningSpaceCountAsync(tenantId, role, email);
        numberOfRooms = await GetRoomCountAsync(tenantId, role, email);
    }

    // Helper method to add headers and make the request
    private async Task<int> GetStudentCountAsync(string tenantId, string role, string email)
    {
        var request = new HttpRequestMessage(HttpMethod.Get, "api/student/count");
        request.Headers.Add("TenantId", tenantId);
        request.Headers.Add("Role", role);
        request.Headers.Add("Email", email);

        var response = await Http.SendAsync(request);
        if (response.IsSuccessStatusCode)
        {
            return await response.Content.ReadFromJsonAsync<int>();
        }
        else
        {
            // Handle error (you can throw or log the error)
            return 0;
        }
    }

    private async Task<int> GetDiningSpaceCountAsync(string tenantId, string role, string email)
    {
        var request = new HttpRequestMessage(HttpMethod.Get, "api/diningspace/count");
        request.Headers.Add("TenantId", tenantId);
        request.Headers.Add("Role", role);
        request.Headers.Add("Email", email);

        var response = await Http.SendAsync(request);
        if (response.IsSuccessStatusCode)
        {
            return await response.Content.ReadFromJsonAsync<int>();
        }
        else
        {
            return 0;
        }
    }

    private async Task<int> GetRoomCountAsync(string tenantId, string role, string email)
    {
        var request = new HttpRequestMessage(HttpMethod.Get, "api/room/count");
        request.Headers.Add("TenantId", tenantId);
        request.Headers.Add("Role", role);
        request.Headers.Add("Email", email);

        var response = await Http.SendAsync(request);
        if (response.IsSuccessStatusCode)
        {
            return await response.Content.ReadFromJsonAsync<int>();
        }
        else
        {
            return 0;
        }
    }
}
