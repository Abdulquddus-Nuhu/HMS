@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Alansar.Core.Entities.Identity
@using Alansar.Core.Enums
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using Alansar.Data
@using System.Security.Claims
@using Microsoft.EntityFrameworkCore
@using System.Text.Json

@inject UserManager<User> UserManager
@inject SignInManager<User> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject AppDbContext dbContext
@* @inject IdentityDbContext IdentityContext *@
@* @inject AuthenticationStateProvider AuthenticationStateProvider *@

<PageTitle>Log in</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Log in</MudText>

<MudGrid>
    <MudItem md="6">
        <StatusMessage Message="@errorMessage" />
        <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
            <DataAnnotationsValidator />

            <MudText GutterBottom="true" Typo="Typo.body1">Use a local account to log in.</MudText>

            <MudGrid>
                <MudItem md="12">
                    <MudStaticTextField For="@(() => Input.Email)" @bind-Value="Input.Email" 
                        Label="Email" Placeholder="name@example.com" 
                        UserAttributes="@(new() { { "autocomplete", "true" }, { "aria-required", "true" } } )" />
                </MudItem>
                <MudItem md="12">
                    <MudStaticTextField For="@(() => Input.Password)" @bind-Value="Input.Password" 
                        Label="Password" InputType="InputType.Password" Placeholder="password" 
                        UserAttributes="@(new() { { "autocomplete", "current-password" }, { "aria-required", "true" } } )" />
                </MudItem>
                <MudItem md="12">
                    <MudStaticCheckBox For="@(() => Input.RememberMe)" @bind-Value="Input.RememberMe">Remember me</MudStaticCheckBox>
                </MudItem>
                <MudItem md="12">
                    <MudStaticButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" FormAction="FormAction.Submit">Log in</MudStaticButton>
                </MudItem>
            </MudGrid>
        </EditForm>

        <MudGrid Class="mt-4">
            <MudItem md="12">
                <MudLink Href="Account/ForgotPassword">Forgot your password?</MudLink><br />
                <MudLink Href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">Register as a new user</MudLink><br />
                <MudLink Href="Account/ResendEmailConfirmation">Resend email confirmation</MudLink>
            </MudItem>
        </MudGrid>
    </MudItem>
    <MudItem md="6">
        <MudText GutterBottom="true" Typo="Typo.body1">Use another service to log in.</MudText>

        <ExternalLoginPicker />
    </MudItem>
</MudGrid>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        var usert = await UserManager.FindByEmailAsync(Input.Email);
        if (usert is null)
        {
            errorMessage = "Error: User not found.";
            return;
        }
        Console.WriteLine(JsonSerializer.Serialize(usert));

            // Retrieve the user
            var user = await UserManager.FindByEmailAsync(Input.Email);
            if (user is not null)
            {
                var claims = new List<Claim>()
                {
                    new Claim("id", user.Id.ToString()),
                    new Claim("fullname", user.FullName.ToString()),
                    new Claim("role", user.RoleType.ToString()),
                    new Claim("tenantId", user.TenantId.Value.ToString() ?? string.Empty),
                };

            // Add the claims to the user
            // await UserManager.AddClaimsAsync(usert, claims);

            // Create a new ClaimsIdentity with the added claims
            var identity = new ClaimsIdentity(claims, IdentityConstants.ApplicationScheme);
            var principal = new ClaimsPrincipal(identity);

            // Sign in the user with the new claims
            await HttpContext.SignInAsync(IdentityConstants.ApplicationScheme, principal);

            Logger.LogInformation("User {Email} logged in successfully.", Input.Email);

            // Redirect to the return URL or another appropriate location
            RedirectManager.RedirectTo(ReturnUrl);
        }

        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        // var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        // if (result.Succeeded)
        // {
        //     Logger.LogInformation("User logged in.");

        //     // Retrieve the user
        //     // var user = await UserManager.FindByEmailAsync(Input.Email);
        //     // var user = await IdentityContext.Users.IgnoreQueryFilters().FirstOrDefaultAsync(x => x.Email == Input.Email);
        //     // var user = await dbContext.Users.IgnoreQueryFilters().FirstOrDefaultAsync(x => x.Email == Input.Email);
        //     // if (user is not null)
        //     // {
        //     //     var claims = new List<Claim>()
        //     //     {
        //     //         new Claim("id", user.Id.ToString()),
        //     //         new Claim("fullname", user.FullName.ToString()),
        //     //         new Claim("role", user.RoleType.ToString()),
        //     //         new Claim("tenantId", user.TenantKey ?? string.Empty),
        //     //     };

        //     //     // Add claims to user
        //     //     await UserManager.AddClaimsAsync(user, claims);

        //     //     // Sign in the user again with the new claims
        //     //     var identity = new ClaimsIdentity(claims, IdentityConstants.ExternalScheme);
        //     //     var principal = new ClaimsPrincipal(identity);

        //     //     // var claims = await userManager.GetClaimsAsync(user);
        //     //     var newPrincipal = new ClaimsPrincipal(identity);
        //     //     var authState = Task.FromResult(new AuthenticationState(newPrincipal));

        //     //     await HttpContext.SignInAsync(IdentityConstants.ExternalScheme, principal);
        //     // }

        //     RedirectManager.RedirectTo(ReturnUrl);
        // }
        // else if (result.RequiresTwoFactor)
        // {
        //     RedirectManager.RedirectTo(
        //         "Account/LoginWith2fa",
        //         new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        // }
        // else if (result.IsLockedOut)
        // {
        //     Logger.LogWarning("User account locked out.");
        //     RedirectManager.RedirectTo("Account/Lockout");
        // }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
