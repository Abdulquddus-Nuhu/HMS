@page "/classes"
@using Alansar.Entities
@inject HttpClient Http
@inject ISnackbar Snackbar
@inject IDialogService DialogService
<PageTitle>Classes</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large">
    <MudText Typo="Typo.h4">Manage Classes</MudText>

    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="OpenAddClassDialog">
        Add New Class
    </MudButton>

    <MudTable Items="classes" Bordered="true" Striped="true">
        <HeaderContent>
            <MudTh>Class Name</MudTh>
            <MudTh>Actions</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd>@context.Name</MudTd>
            <MudTd>
                <MudButton Variant="Variant.Outlined" Color="Color.Info" OnClick="@(() => OpenEditClassDialog(context))">Edit</MudButton>
                <MudButton Variant="Variant.Outlined" Color="Color.Error" OnClick="@(() => OpenDeleteClassDialog(context))">Delete</MudButton>
            </MudTd>
        </RowTemplate>
    </MudTable>
</MudContainer>

@code {
    private List<Class> classes = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadClasses();
    }

    private async Task LoadClasses()
    {
        classes = await Http.GetFromJsonAsync<List<Class>>("/api/class");
    }

    private async Task OpenAddClassDialog()
    {
        var parameters = new DialogParameters { ["Class"] = new Class() };
        var dialog = DialogService.Show<ClassDialog>("Add Class", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await LoadClasses();
            Snackbar.Add("Class added successfully", Severity.Success);
        }
    }

    private async Task OpenEditClassDialog(Class classModel)
    {
        var parameters = new DialogParameters { ["Class"] = classModel };
        var dialog = DialogService.Show<ClassDialog>("Edit Class", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await LoadClasses();
            Snackbar.Add("Class updated successfully", Severity.Success);
        }
    }

    private async Task OpenDeleteClassDialog(Class classModel)
    {
        var parameters = new DialogParameters { ["ContentText"] = $"Are you sure you want to delete class {classModel.Name}?", ["Class"] = classModel };
        var dialog = DialogService.Show<DeleteDialog>("Delete Class", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await Http.DeleteAsync($"/api/class/{classModel.Id}");
            await LoadClasses();
            Snackbar.Add("Class deleted successfully", Severity.Success);
        }
    }
}
