@* @using Microsoft.AspNetCore.Authorization
@attribute [Authorize] *@
@page "/dining"
@using Alansar.Entities
@using Alansar1.Components.Layout
@layout MainLayout
@inject HttpClient Http
@inject ISnackbar Snackbar
@inject IDialogService DialogService
<PageTitle>Dining Space</PageTitle>


<MudContainer MaxWidth="MaxWidth.Large">
    <MudText Typo="Typo.h4" Class="mb-4">Manage Dining Spaces and Assignments</MudText>

    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="OpenAddDiningSpaceDialog" StartIcon="@Icons.Material.Filled.Add">Add New Dining Space</MudButton>
    <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="OpenAssignStudentsDialog" StartIcon="@Icons.Material.Filled.PersonAdd">Assign Students</MudButton>

    @if (isLoading)
    {
        <MudProgressCircular Class="mt-4" Size="Size.Large" Indeterminate="true" />
    }
    else
    {
        <MudTable ServerData="LoadServerData" Class="mt-4" Hover="true" Bordered="true" Striped="true">
            <HeaderContent>
                <MudTh>Name</MudTh>
                <MudTh>Capacity</MudTh>
                <MudTh>Actions</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd>@context.Name</MudTd>
                <MudTd>@context.Capacity</MudTd>
                <MudTd>
                    <MudButton Variant="Variant.Outlined" Color="Color.Info" OnClick="@(async () => await OpenEditDiningSpaceDialog(context))" StartIcon="@Icons.Material.Filled.Edit" Class="mr-2">Edit</MudButton>
                    <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="@(async () => await OpenDeleteDiningSpaceDialog(context))" StartIcon="@Icons.Material.Filled.Delete">Delete</MudButton>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(async () => await OpenViewAssignmentsDialog(context))" StartIcon="@Icons.Material.Filled.Visibility">View Assignments</MudButton>
                </MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>
    }
</MudContainer>

@code {
    private List<DiningSpace> diningSpaces = new List<DiningSpace>();
    private int totalItems = 0;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadDiningSpaces();
    }

    private async Task LoadDiningSpaces()
    {
        isLoading = true;
        try
        {
            diningSpaces = await Http.GetFromJsonAsync<List<DiningSpace>>("api/diningspace");
            totalItems = diningSpaces.Count;
            StateHasChanged();
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task OpenAddDiningSpaceDialog()
    {
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small };
        var parameters = new DialogParameters { ["DiningSpace"] = new DiningSpace() };

        var dialog = DialogService.Show<DiningSpaceDialog>("Add New Dining Space", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await LoadDiningSpaces(); // Reload data after adding
            Snackbar.Add("Dining space added successfully", Severity.Success);
        }
    }

    private async Task OpenEditDiningSpaceDialog(DiningSpace space)
    {
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small };
        var parameters = new DialogParameters { ["DiningSpace"] = space };

        var dialog = DialogService.Show<DiningSpaceDialog>("Edit Dining Space", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await LoadDiningSpaces(); // Reload data after editing
            Snackbar.Add("Dining space updated successfully", Severity.Success);
        }
    }

    private async Task OpenDeleteDiningSpaceDialog(DiningSpace space)
    {
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small };
        var parameters = new DialogParameters
            {
                ["ContentText"] = $"Are you sure you want to delete the dining space {space.Name}?",
                ["ButtonText"] = "Delete",
                ["Color"] = Color.Error,
                ["DiningSpace"] = space
            };

        var dialog = DialogService.Show<DeleteDiningSpaceDialog>("Delete Dining Space", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await Http.DeleteAsync($"api/diningspace/{space.Id}");
            await LoadDiningSpaces(); // Reload data after deletion
            Snackbar.Add("Dining space deleted successfully", Severity.Success);
        }
    }

    private async Task OpenViewAssignmentsDialog(DiningSpace space)
    {
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Large };
        var parameters = new DialogParameters { ["DiningSpace"] = space };

        var dialog = DialogService.Show<ViewAssignmentsDialog>("View Dining Assignments", parameters, options);
        await dialog.Result; // No need to reload the data
    }

    private async Task OpenAssignStudentsDialog()
    {
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium };
        var dialog = DialogService.Show<AssignStudentsDialog>("Assign Students to Dining Spaces", options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await LoadDiningSpaces(); // Reload data after assigning students
            Snackbar.Add("Students assigned successfully", Severity.Success);
        }
    }

    private async Task<TableData<DiningSpace>> LoadServerData(TableState state, CancellationToken cancellationToken)
    {
        var pagedItems = diningSpaces.Skip(state.Page * state.PageSize).Take(state.PageSize).ToList();
        return new TableData<DiningSpace> { Items = pagedItems, TotalItems = totalItems };
    }
}











@* @page "/dining"
@using MudBlazorWebApp2.Entities
@using MudBlazorWebApp2.Components.Layout
@layout MainLayout
@inject HttpClient Http
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<MudContainer MaxWidth="MaxWidth.Large">
    <MudText Typo="Typo.h4" Class="mb-4">Manage Dining Spaces</MudText>

    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="OpenAddDiningSpaceDialog" StartIcon="@Icons.Material.Filled.Add">Add New Dining Space</MudButton>

    @if (isLoading)
    {
        <MudProgressCircular Class="mt-4" Size="Size.Large" Indeterminate="true" />
    }
    else
    {
        <MudTable ServerData="LoadServerData" Class="mt-4" Hover="true" Bordered="true" Striped="true">
            <HeaderContent>
                <MudTh>Name</MudTh>
                <MudTh>Capacity</MudTh>
                <MudTh>Actions</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd>@context.Name</MudTd>
                <MudTd>@context.Capacity</MudTd>
                <MudTd>
                    <MudButton Variant="Variant.Outlined" Color="Color.Info" OnClick="@(async () => await OpenEditDiningSpaceDialog(context))" StartIcon="@Icons.Material.Filled.Edit" Class="mr-2">Edit</MudButton>
                    <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="@(async () => await OpenDeleteDiningSpaceDialog(context))" StartIcon="@Icons.Material.Filled.Delete">Delete</MudButton>
                </MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>
    }
</MudContainer>

@code {
    private List<DiningSpace> diningSpaces = new List<DiningSpace>();
    private int totalItems = 0;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadDiningSpaces();
    }

    private async Task LoadDiningSpaces()
    {
        isLoading = true;
        try
        {
            diningSpaces = await Http.GetFromJsonAsync<List<DiningSpace>>("api/diningspace");
            totalItems = diningSpaces.Count;
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task OpenAddDiningSpaceDialog()
    {
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small };
        var parameters = new DialogParameters { ["DiningSpace"] = new DiningSpace() };

        var dialog = DialogService.Show<DiningSpaceDialog>("Add New Dining Space", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await LoadDiningSpaces(); // Reload data after adding
            Snackbar.Add("Dining space added successfully", Severity.Success);
        }
    }

    private async Task OpenEditDiningSpaceDialog(DiningSpace space)
    {
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small };
        var parameters = new DialogParameters { ["DiningSpace"] = space };

        var dialog = DialogService.Show<DiningSpaceDialog>("Edit Dining Space", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await LoadDiningSpaces(); // Reload data after editing
            Snackbar.Add("Dining space updated successfully", Severity.Success);
        }
    }

    private async Task OpenDeleteDiningSpaceDialog(DiningSpace space)
    {
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small };
        var parameters = new DialogParameters
            {
                ["ContentText"] = $"Are you sure you want to delete the dining space {space.Name}?",
                ["ButtonText"] = "Delete",
                ["Color"] = Color.Error,
                ["DiningSpace"] = space
            };

        var dialog = DialogService.Show<DeleteDiningSpaceDialog>("Delete Dining Space", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await Http.DeleteAsync($"api/diningspace/{space.Id}");
            await LoadDiningSpaces(); // Reload data after deletion
            Snackbar.Add("Dining space deleted successfully", Severity.Success);
        }
    }

    private async Task<TableData<DiningSpace>> LoadServerData(TableState state, CancellationToken cancellationToken)
    {
        var pagedItems = diningSpaces.Skip(state.Page * state.PageSize).Take(state.PageSize).ToList();
        return new TableData<DiningSpace> { Items = pagedItems, TotalItems = totalItems };
    }
}
 *@