@* @using Microsoft.AspNetCore.Authorization
@attribute [Authorize] *@
@page "/admin/rooms"
@page "/booking"
@using Alansar1.Components.Layout
@layout MainLayout
@using Alansar.Entities
@using Alansar.Models.Requests
@using MudBlazor
@inject HttpClient Http
@inject ISnackbar Snackbar
@inject IDialogService DialogService
<PageTitle>Hostels</PageTitle>

@inject NavigationManager Navigation

<MudContainer MaxWidth="MaxWidth.Large">
    <MudText Typo="Typo.h4" Class="mb-4">Manage Rooms</MudText>

    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="OpenAddRoomDialog" StartIcon="@Icons.Material.Filled.Add">Add New Room</MudButton>

    @if (isLoading)
    {
        <MudProgressCircular Class="mt-4" Size="Size.Large" Indeterminate="true" />
    }
    else
    {
        <MudTable Items="rooms" Hover="true" Bordered="true" Striped="true">
            <HeaderContent>
                <MudTh>Room Number</MudTh>
                <MudTh>Type</MudTh>
                <MudTh>Available</MudTh>
                <MudTh>Capacity</MudTh>
                <MudTh>Price</MudTh>
                <MudTh>Actions</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd>@context.RoomNumber</MudTd>
                <MudTd>@context.Type</MudTd>
                <MudTd>@context.IsAvailable</MudTd>
                <MudTd>@context.Capacity</MudTd>
                <MudTd>@context.Price.ToString("C", new System.Globalization.CultureInfo("en-NG"))</MudTd>

@*                 <MudTd>@context.Price.ToString("C")</MudTd>
 *@                <MudTd>
                    <MudButton Variant="Variant.Outlined" Color="Color.Info" OnClick="@(async () => await OpenEditRoomDialog(context))" StartIcon="@Icons.Material.Filled.Edit" Class="mr-2">Edit</MudButton>
                    <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="@(async () => await OpenDeleteRoomDialog(context))" StartIcon="@Icons.Material.Filled.Delete">Delete</MudButton>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="() => ViewRoomDetails(context.Id)" StartIcon="@Icons.Material.Filled.Visibility">View</MudButton>
                </MudTd>
            </RowTemplate>
        </MudTable>
    }
</MudContainer>

@code {
    private List<Room> rooms = new List<Room>();
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await RefreshRooms();
    }

    private async Task RefreshRooms()
    {
        isLoading = true;
        rooms = await Http.GetFromJsonAsync<List<Room>>("api/room");
        isLoading = false;
    }

    private async Task OpenAddRoomDialog()
    {
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small };
        var parameters = new DialogParameters { ["Room"] = new CreateRoomRequest() };

        var dialog = DialogService.Show<RoomDialog>("Add New Room", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await RefreshRooms();
            Snackbar.Add("Room added successfully", Severity.Success);
        }
    }

    private async Task OpenEditRoomDialog(Room room)
    {
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small };
        var parameters = new DialogParameters { ["Room"] = room };

        var dialog = DialogService.Show<RoomDialog>("Edit Room", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await RefreshRooms();
            Snackbar.Add("Room updated successfully", Severity.Success);
        }
    }

    private async Task OpenDeleteRoomDialog(Room room)
    {
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small };
        var parameters = new DialogParameters
            {
                ["ContentText"] = $"Are you sure you want to delete room {room.RoomNumber}?",
                ["ButtonText"] = "Delete",
                ["Color"] = Color.Error,
                ["Room"] = room
            };

        var dialog = DialogService.Show<DeleteRoomDialog>("Delete Room", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await Http.DeleteAsync($"api/room/{room.Id}");
            await RefreshRooms();
            Snackbar.Add("Room deleted successfully", Severity.Success);
        }
    }

    private void ViewRoomDetails(int roomId)
    {
        if (Navigation != null && roomId > 0)
        {
            Navigation.NavigateTo($"/admin/room-details/{roomId}");
        }
        else
        {
            Console.WriteLine("NavigationManager is null or roomId is invalid.");
        }
    }
}
