@page "/slogin"
@page "/aAccount/Login"
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using Alansar1.Components.Layout
@using Alansar.Entities.Identity
@using Alansar.Data
@using System.Security.Claims
@layout AuthLayout
@inject NavigationManager Navigation
@inject ISnackbar Snackbar
@inject SignInManager<User> SignInManager
@inject UserManager<User> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IHttpContextAccessor HttpContextAccessor
@inject AppDbContext DbContext
@inject IPasswordHasher<User> PasswordHasher


<MudContainer MaxWidth="MaxWidth.Medium" Class="pa-4">
    <MudGrid Justify="Justify.Center">
        <MudItem xs="12" sm="8" md="8">
            <MudPaper Class="pa-6">
                <MudText Typo="Typo.h4" Class="mb-4" Align="Align.Center">Welcome Back</MudText>
                <MudText Typo="Typo.body1" Class="mb-4" Align="Align.Center">
                    Please log in to continue to the Hostel Management System.
                </MudText>
                <EditForm Model="loginModel" OnValidSubmit="HandleLogin">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <MudTextField Label="Email"
                                  @bind-Value="loginModel.Email"
                                  Required="true"
                                  Class="mb-2"
                                  FullWidth="true" />

                    <MudTextField Label="Password"
                                  @bind-Value="loginModel.Password"
                                  Required="true"
                                  FullWidth="true"
                                  InputType="@passwordInputType"
                                  Adornment="Adornment.End"
                                  AdornmentIcon="@passwordIcon"
                                  OnAdornmentClick="@TogglePasswordVisibility"
                                  Class="mb-2" />

                    <MudLink Href="/forgot-password" Class="d-block mb-2">Forgot Password?</MudLink>

                    <MudButton Variant="Variant.Filled"
                               Color="Color.Primary"
                               ButtonType="ButtonType.Submit"
                               Class="mt-4"
                               Disabled="@isLoading"
                               FullWidth="true">
                        @if (isLoading)
                        {
                            <MudProgressCircular Size="Size.Small" Indeterminate="true" />
                        }
                        else
                        {
                            @:Login
                        }
                    </MudButton>
                </EditForm>
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {

    private LoginModel loginModel = new LoginModel();
    private bool isLoading = false;
    private bool showPassword = false;

    private string passwordIcon => showPassword ? Icons.Material.Filled.Visibility : Icons.Material.Filled.VisibilityOff;
    private InputType passwordInputType => showPassword ? InputType.Text : InputType.Password;

    private async Task HandleLogin()
    {
        isLoading = true;
        // var user = await UserManager.FindByEmailAsync(loginModel.Email);
        // var user = await DbContext.Users.SingleOrDefaultAsync(u => u.Email == loginModel.Email);

        
        // if (user == null)
        // {
        //     Snackbar.Add("Account not found. Please check your username and password.", Severity.Error);
        //     isLoading = false;
        //     return;
        // }

        // Attempt to sign in the user
        var result = await SignInManager.PasswordSignInAsync(loginModel.Email, loginModel.Password, false, false);
        // var passwordVerificationResult = PasswordHasher.VerifyHashedPassword(user, user.PasswordHash, loginModel.Password);

        if (result.Succeeded)
        // if (passwordVerificationResult == PasswordVerificationResult.Success)
        {
            // Sign in the user and set the cookie
            var httpContext = HttpContextAccessor.HttpContext;
            if (httpContext != null)
            {
                // var claims = new List<Claim>
                // {
                //     new Claim(ClaimTypes.Name, user.UserName),
                //     new Claim("roleType", user.RoleType.ToString())
                // };

                // var claimsIdentity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
                // var principal = new ClaimsPrincipal(claimsIdentity);

                // if (httpContext != null)
                // {
                //     await httpContext.SignInAsync(CookieAuthenticationDefaults.AuthenticationScheme, principal);
                // }

                // await httpContext.SignInAsync(CookieAuthenticationDefaults.AuthenticationScheme, principal);
            }

            // Redirect after successful login
            Navigation.NavigateTo("/student-home", true);
            Snackbar.Add("Login Successful", Severity.Success);
        }
        // else if (result.IsNotAllowed)
        // {
        //     Snackbar.Add("Account is not allowed to sign in.", Severity.Warning);
        // }
        // else if (result.IsLockedOut)
        // {
        //     Snackbar.Add("Account is locked out.", Severity.Error);
        // }
        else
        {
            Snackbar.Add("Invalid login attempt. Please check your credentials.", Severity.Error);
        }

        isLoading = false;
    }

    private void TogglePasswordVisibility()
    {
        showPassword = !showPassword;
    }

    public class LoginModel
    {
        public string Email { get; set; }
        public string Password { get; set; }
    }
}
